vendor_name = ModelSim
source_file = 1, C:/Users/Pichau/Desktop/ARM - A/registrador_cond/registrador_cond.vhd
source_file = 1, C:/Users/Pichau/Desktop/ARM - A/condcheck/condcheck.vhd
source_file = 1, C:/Users/Pichau/Desktop/ARM - A/condicional/condicional.vhd
source_file = 1, C:/Users/Pichau/Desktop/ARM - A/condicional/tb_condicional.vhd
source_file = 1, C:/Users/Pichau/Desktop/ARM - A/condicional/db/condicional.cbx.xml
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/prmtvs_b.vhd
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/prmtvs_p.vhd
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/timing_b.vhd
source_file = 1, c:/altera/13.0sp1/quartus/libraries/vhdl/ieee/timing_p.vhd
design_name = condicional
instance = comp, \Cond_O[2]~I\, Cond_O[2], condicional, 1
instance = comp, \Clk~I\, Clk, condicional, 1
instance = comp, \Clk~clkctrl\, Clk~clkctrl, condicional, 1
instance = comp, \Cond_O[1]~I\, Cond_O[1], condicional, 1
instance = comp, \PCS~I\, PCS, condicional, 1
instance = comp, \ALUFlags[1]~I\, ALUFlags[1], condicional, 1
instance = comp, \flipflop0|q[1]~feeder\, flipflop0|q[1]~feeder, condicional, 1
instance = comp, \ALUFlags[2]~I\, ALUFlags[2], condicional, 1
instance = comp, \FlagW[1]~I\, FlagW[1], condicional, 1
instance = comp, \flagwrite[1]\, flagwrite[1], condicional, 1
instance = comp, \flipflop1|q[0]\, flipflop1|q[0], condicional, 1
instance = comp, \FlagW[0]~I\, FlagW[0], condicional, 1
instance = comp, \flagwrite[0]\, flagwrite[0], condicional, 1
instance = comp, \flipflop0|q[1]\, flipflop0|q[1], condicional, 1
instance = comp, \ALUFlags[3]~I\, ALUFlags[3], condicional, 1
instance = comp, \flipflop1|q[1]\, flipflop1|q[1], condicional, 1
instance = comp, \ALUFlags[0]~I\, ALUFlags[0], condicional, 1
instance = comp, \flipflop0|q[0]~feeder\, flipflop0|q[0]~feeder, condicional, 1
instance = comp, \flipflop0|q[0]\, flipflop0|q[0], condicional, 1
instance = comp, \check|Mux0~0\, check|Mux0~0, condicional, 1
instance = comp, \PCSrc~2\, PCSrc~2, condicional, 1
instance = comp, \RegW~I\, RegW, condicional, 1
instance = comp, \check|Mux0~1\, check|Mux0~1, condicional, 1
instance = comp, \NoWrite~I\, NoWrite, condicional, 1
instance = comp, \RegWrite~0\, RegWrite~0, condicional, 1
instance = comp, \MemW~I\, MemW, condicional, 1
instance = comp, \MemWrite~2\, MemWrite~2, condicional, 1
instance = comp, \Cond_O[0]~I\, Cond_O[0], condicional, 1
instance = comp, \Cond_O[3]~I\, Cond_O[3], condicional, 1
instance = comp, \PCSrc~I\, PCSrc, condicional, 1
instance = comp, \RegWrite~I\, RegWrite, condicional, 1
instance = comp, \MemWrite~I\, MemWrite, condicional, 1
